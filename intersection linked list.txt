22.Write a program to find the node at which the intersection of two singly linked lists begins.

For example, the following two linked lists:


begin to intersect at node c1.

 

Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
 

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        a=headA
        b=headB
        bb=0;
        c=0;
        while(a!=None):
            c=c+1;
            a=a.next;
        while(b!=None):
            bb=bb+1;
            b=b.next;
        print(bb,c)
        if(bb<c):
            k=abs(c-bb);
            for i in range(k):
                headA=headA.next;
        else:
            k=abs(bb-c);
            for i in range(k):
                headB=headB.next;
        while(headA!=None and headB!=None):
            if(headA==headB):
                return headA
            headA=headA.next;
            headB=headB.next;
        return None
        
        